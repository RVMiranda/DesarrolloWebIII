services:
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin_user
      MONGO_INITDB_ROOT_PASSWORD: web3
    ports:
      - "27017:27017"
    networks:
      - mongo-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - mongo-data:/data/db

  mongoclient:
    image: alpine/mongosh
    depends_on:
      mongo:
        condition: service_healthy
    command: ["tail", "-f", "/dev/null"]
    restart: always
    networks:
      - mongo-network

  calculadora:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      # Nota: tu código Python debe leer MONGO_URI (o acepta también MONGO_URL si lo deseas)
      MONGO_URI: mongodb://admin_user:web3@mongo:27017/?authSource=admin
    ports:
      - "8089:8000"          # backend publicado en el host
    networks:
      - mongo-network
    volumes:
      - ./backend:/app       # hot-reload del backend
    restart: always
    depends_on:
      mongo:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"          # Vite en el host
    volumes:
      - ./frontend:/app      # hot-reload del frontend
      - /app/node_modules    # evita que tu node_modules local pise el del contenedor
    networks:
      - mongo-network
    depends_on:
      - calculadora
    restart: always
    environment:
      - CHOKIDAR_USEPOLLING=true             # mejor hot-reload en Docker
      - VITE_API_URL=http://localhost:8089   # IMPORTANTÍSIMO para llamadas desde el navegador

networks:
  mongo-network:
    driver: bridge

volumes:
  mongo-data:
