services:
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports: ["27017:27017"]
    networks: [mongo-network]
    healthcheck:
      test:
        - CMD-SHELL
        - >
          mongosh --host 127.0.0.1
          -u "$$MONGO_INITDB_ROOT_USERNAME" -p "$$MONGO_INITDB_ROOT_PASSWORD"
          --authenticationDatabase admin --quiet
          --eval "if (db.runCommand({ping:1}).ok) { quit(0) } else { quit(1) }"
      timeout: 5s
      retries: 20
      start_period: 20s

  mongoclient:
    image: alpine/mongosh
    depends_on: { mongo: { condition: service_healthy } }
    command: ["tail","-f","/dev/null"]
    restart: always
    networks: [mongo-network]

  calculadora:
    image: ghcr.io/${GHCR_OWNER}/${GHCR_REPO}-backend:${BACKEND_TAG}
    platform: linux/amd64            # <- emulación en Mac M-series (rápido de aplicar)
    pull_policy: always
    environment:
      MONGO_URL: mongodb://$MONGO_INITDB_ROOT_USERNAME:$MONGO_INITDB_ROOT_PASSWORD@mongo:27017/?authSource=admin
    ports: ["8089:8000"]
    networks: [mongo-network]
    restart: always
    depends_on: { mongo: { condition: service_healthy } }

  frontend:
    image: ghcr.io/${GHCR_OWNER}/${GHCR_REPO}-frontend:${FRONTEND_TAG}
    platform: linux/amd64
    pull_policy: always
    environment:
      REACT_APP_API_URL: http://calculadora:8000 
      VITE_API_URL:        http://calculadora:8000 # por si se cambia a Vite
      CHOKIDAR_USEPOLLING: "true"
    ports: ["3000:3000"]   
    depends_on: [calculadora]
    networks: [mongo-network]

  calculadora-tests:
    image: ghcr.io/${GHCR_OWNER}/${GHCR_REPO}-backend:${BACKEND_TAG}
    platform: linux/amd64
    working_dir: /app
    environment:
      MONGO_URL: mongodb://admin_user:web3@mongo:27017/?authSource=admin
    depends_on: { mongo: { condition: service_healthy } }
    networks: [mongo-network]
    command: ["pytest","-q"]
    profiles: ["test"]

  prometheus:
      image: prom/prometheus
      container_name: web3_calculadora-prometheus
      volumes:
        - ./monitoring/prometheus.yml:/prometheus.yml
      command: "--config.file=/prometheus.yml"
      ports:
        - "9090:9090"
      networks:
        - mongo-network
      #pull_policy: always

  grafana:
    image: grafana/grafana:latest
    container_name: web3_calculadora-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - mongo-network

  loki:
    image: grafana/loki:3.1.0
    container_name: web3_calculadora-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml
      - ./loki-data:/loki
    networks:
      - mongo-network

  promtail:
    image: grafana/promtail:3.1.0
    container_name: web3_calculadora-promtail
    depends_on:
      - loki
    volumes:
      - ./monitoring/promtail-config.yaml:/etc/promtail/config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - mongo-network

volumes:
  grafana-storage:

networks:
  mongo-network:
    name: web3_calculadora_mongo-network
    driver: bridge
